<?php

/**
 * @file
 * Allows site administrators to delegate the task of managing user's roles.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Url;
use Drupal\user\RoleInterface;

/**
 * Implements hook_help().
 */
function roleassign_help($route_name, RouteMatchInterface $route_match) {
  $user_permissions = \Drupal::service('user.permissions');

  switch ($route_name) {
    /******************************
     * Help Page
     ******************************/
    case 'help.page.roleassign':
      return t('
        <p>RoleAssign specifically allows site administrators to further delegate the task of managing user\'s roles.</p>
        <p>RoleAssign introduces a new permission called Assign roles. Users with this permission are able to assign selected roles to still other users. Only users with the Administer permissions permission may select which roles are available for assignment through this module.</p>
        <h2>Background</h2>
        <p>It is possible for site administrators to delegate the user administration through the Administer users permission. But that doesn\'t include the right to assign roles to users. That is necessary if the delegatee should be able to administrate user accounts without intervention from a site administrator.</p>
        <p>To delegate the assignment of roles, site administrators have had until now no other choice than also grant the Administer permissions permission. But that is not advisable, since it gives right to access all roles, and worse, to grant any rights to any role. That can be abused by the delegatee, who can assign himself all rights and thereby take control over the site.</p>
        <p>This module solves this dilemma by introducing the Assign roles permission. While editing a user\'s account information, a user with this permission will be able to select roles for the user from a set of available roles. Roles available are configured by users with the Administer permissions permission.</p>
        <h2>Configuration</h2>
        <ol>
          <li>Log in as site administrator.</li>
          <li>Go to the administration page for access control and grant Assign roles permission to those roles that should be able to assign roles to other users. Notice that besides the Assign roles permission, these roles also must have the Administer users permission.</li>
          <li>Go to the administration page for role assign and select those roles that should be available for assignment by users with Assign roles permission.</li>
          <li>For each user that should be able to assign roles, go to the user\'s account and select a role with both the Assign roles and the Administer users permissions.</li>
        </ol>
        <p><strong>Beware:</strong> granting Administer users permission to users will allow them to modify admin passwords or email addresses or even delete the site administrator account. The <a href=":user_protect">User protect</a> module can prevent this.</p>
        <h2>Usage</h2>
        <ol>
          <li>Log in as a user with both the Assign roles and the Administer users permissions.</li>
          <li>To change the roles of a user, go to the user\'s account and review the assignable roles and change them as necessary.</li>
        </ol>', [
          ':user_protect' => 'http://drupal.org/project/userprotect',
        ]
      );

    /******************************
     * Role assign settings
     ******************************/
    case 'roleassign.settings':
      $permission_information = $user_permissions->getPermissions();

      return t('Users with both %administer_users and %assign_roles permissions are allowed to assign the roles selected below. For more information, see the <a href=":help">help page</a>.', [
        '%administer_users' => $permission_information['administer users']['title'],
        '%assign_roles' => $permission_information['assign roles']['title'],
        ':help' => Url::fromRoute('help.page', [
          'name' => 'roleassign',
        ])->toString(),
      ]);
  }
}

/**
 * Implements hook_form_alter().
 */
function roleassign_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if (_roleassign_restrict_access()) {
    $user_forms = [
      'user_register_form',
      'user_form',
      'bulk_add_cas_users',
    ];

    if (in_array($form_id, $user_forms)) {
      $roles = user_role_names(TRUE);
      $assignable_roles = _roleassign_get_assignable_roles();
      $sticky_roles = [];

      switch ($form_id) {
        /******************************
         * User Register Form
         * User Form
         ******************************/
        case 'user_register_form':
        case 'user_form':
          /******************************
           * Get currently asssigned roles
           ******************************/
          if ($form_id === 'user_form') {
            $current_account = $form_state->getFormObject()->getEntity();

            if (!empty($current_account->id())) {
              $current_assigned_roles = $current_account->getRoles();
              $current_assigned_roles = array_combine($current_assigned_roles, $current_assigned_roles);

              /******************************
               * Get Sticky Roles
               * - An account might already have
               *   a role that isn't available for
               *   assignment through this module,
               *   such a role is called "sticky"
               ******************************/
              $sticky_roles = array_diff_key($current_assigned_roles, $assignable_roles);
              $sticky_roles = array_intersect_key($roles, $sticky_roles);
            }
          }

          /******************************
           * Add 'Authenticated user' as a
           * Sticky role, if not previously set
           ******************************/
          if (!isset($sticky_roles[RoleInterface::AUTHENTICATED_ID])) {
            $sticky_roles[RoleInterface::AUTHENTICATED_ID] = $roles[RoleInterface::AUTHENTICATED_ID];
          }

          /******************************
           * Store sticky roles in form values
           ******************************/
          $form['sticky_roles'] = [
            '#type' => 'value',
            '#value' => $sticky_roles,
          ];

          /******************************
           * Assignable Roles
           ******************************/
          $roles_field = [
            '#type' => 'checkboxes',
            '#title' => t('Assignable roles'),
            '#options' => $assignable_roles,
            '#default_value' => empty($current_assigned_roles) ? [] : array_keys($current_assigned_roles),
            '#description' => t('The user receives the combined permissions of all roles selected here and the following roles: %roles.', [
              '%roles' => implode(', ', $sticky_roles),
            ]),
          ];

          /******************************
           * If the user form is in an 'account' fieldset,
           * add it accordingly
           ******************************/
          if (isset($form['account'])) {
            $user_form =&$form['account'];
          }
          else {
            $user_form =&$form;
          }

          /******************************
           * Add 'Assignable roles' to the user form
           * and ensure it's before 'Notify user of new account', if set
           ******************************/
          if (isset($user_form['notify'])) {
            $notify_field = $user_form['notify'];
            unset($user_form['notify']);
            $user_form['roles'] = $roles_field;
            $user_form['notify'] = $notify_field;
          }
          else {
            $user_form['roles'] = $roles_field;
          }
          break;

        /******************************
         * Bulk Add CAS users
         * - Add handling for the CAS module
         ******************************/
        case 'bulk_add_cas_users':
          if (\Drupal::service('module_handler')->moduleExists('cas')) {
            $form['roles']['#options'] = $assignable_roles;
          }
          break;
      }
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_presave() as hook_user_presave().
 */
function roleassign_user_presave($account) {
  if (_roleassign_restrict_access()) {
    $assignable_roles = array_keys(_roleassign_get_assignable_roles());
    $new_roles = array_intersect($account->getRoles(), $assignable_roles);

    if (!$account->isNew()) {
      $original_roles = $account->original->getRoles();
      $unassignable_roles = array_keys(_roleassign_get_unassignable_roles());
      $new_roles = array_merge($new_roles, array_intersect($original_roles, $unassignable_roles));
    }

    $account->roles = $new_roles;
  }
}

/**
 * Helper function to restrict access.
 *
 * Specify whether the current user should be restricted in the roles
 * they can assign - as set by the RoleAssign configuration.
 *
 * @return bool
 *   Whether or not to restrict the current user.
 */
function _roleassign_restrict_access() {
  $current_user = \Drupal::currentUser();
  $restrict_access = TRUE;

  /******************************
   * Don't restrict access if the user matches any of the following:
   * - Has the 'administer permissions' permission
   * - Has both 'administer users' and 'assign roles' permissions
   ******************************/
  if (
    $current_user->hasPermission('administer permissions') ||
    (
      !$current_user->hasPermission('administer users') ||
      !$current_user->hasPermission('assign roles')
    )
  ) {
    $restrict_access = FALSE;
  }

  return $restrict_access;
}

/**
 * Helper function to get assignable roles.
 *
 * Get a list of roles that are assignable by a restricted user
 * that only has "assign roles" permission, not "administer permissions".
 */
function _roleassign_get_assignable_roles() {
  $config = \Drupal::service('config.factory');
  $roleassign_roles = array_flip($config->get('roleassign.settings')->get('roleassign_roles'));
  $roles = user_role_names(TRUE);
  // Ignore Authenticated user as this is not required.
  unset($roles[RoleInterface::AUTHENTICATED_ID]);
  $assignable_roles = array_intersect_key($roles, $roleassign_roles);

  return $assignable_roles;
}

/**
 * Helper function to get unassignable roles.
 *
 * Get a list of roles that are not assignable by a restricted user
 * that only has "assign roles" permission, not "administer permissions".
 */
function _roleassign_get_unassignable_roles() {
  $roles = user_role_names(TRUE);
  // Ignore Authenticated user as this is not required.
  unset($roles[RoleInterface::AUTHENTICATED_ID]);
  $assignable_roles = _roleassign_get_assignable_roles();
  $unassignable_roles = array_diff($roles, $assignable_roles);

  return $unassignable_roles;
}
